import { downloadZip, type InputWithSizeMeta } from 'client-zip';
import { freeze, type Immutable } from 'immer';
import {
	AssetSourceGraphicsDefinitionSchema,
	type AssetId,
	type AssetSourceGraphicsDefinition,
	type GraphicsSourceLayer,
	type GraphicsSourceLayerType,
} from 'pandora-common';
import { DownloadAsFile } from '../../../common/downloadHelper.ts';
import { Observable, type ReadonlyObservable } from '../../../observable.ts';
import { EditorAssetGraphicsWornLayer, EditorAssetGraphicsWornLayerContainer } from '../editorAssetGraphicsWornLayer.ts';
import type { EditorAssetGraphics } from './editorAssetGraphics.ts';
import { EditorAssetGraphicsBase } from './editorAssetGraphicsBase.ts';

export interface EditorWornLayersContainer {
	readonly assetGraphics: EditorAssetGraphics;
	readonly layers: ReadonlyObservable<readonly EditorAssetGraphicsWornLayer[]>;

	addLayer(layer: GraphicsSourceLayerType | Immutable<GraphicsSourceLayer>, insertIndex?: number): EditorAssetGraphicsWornLayer;
	deleteLayer(layer: EditorAssetGraphicsWornLayer): void;
	moveLayerRelative(layer: EditorAssetGraphicsWornLayer, shift: number): void;
}

export class EditorAssetGraphicsWorn extends EditorAssetGraphicsBase implements EditorWornLayersContainer {
	private readonly _layers = new Observable<readonly EditorAssetGraphicsWornLayer[]>([]);
	public get layers(): ReadonlyObservable<readonly EditorAssetGraphicsWornLayer[]> {
		return this._layers;
	}

	public get assetGraphics(): this {
		return this;
	}

	constructor(id: AssetId, definition: Immutable<AssetSourceGraphicsDefinition>, onChange?: () => void) {
		super(id, onChange);
		this.load(definition);
	}

	public load(definition: Immutable<AssetSourceGraphicsDefinition>): void {
		freeze(definition, true);
		this._layers.value = definition.layers.map((l): EditorAssetGraphicsWornLayer => {
			const layer = EditorAssetGraphicsWornLayerContainer.create(l, this);
			layer.definition.subscribe(() => {
				this.onChange();
			});
			return layer;
		});
		this.onChange();
	}

	public export(): Immutable<AssetSourceGraphicsDefinition> {
		return {
			layers: this._layers.value.map((l) => l.definition.value),
		};
	}

	public addLayer(layer: GraphicsSourceLayerType | Immutable<GraphicsSourceLayer>, insertIndex?: number): EditorAssetGraphicsWornLayer {
		const newLayer = EditorAssetGraphicsWornLayerContainer.createNew(layer, this);
		newLayer.definition.subscribe(() => {
			this.onChange();
		});
		this._layers.produce((v) => v.toSpliced(insertIndex ?? v.length, 0, newLayer));
		this.onChange();
		return newLayer;
	}

	public deleteLayer(layer: EditorAssetGraphicsWornLayer): void {
		const index = this._layers.value.indexOf(layer);
		if (index < 0)
			return;

		this._layers.produce((layers) => layers.filter((l) => l !== layer));

		this.onChange();
	}

	public moveLayerRelative(layer: EditorAssetGraphicsWornLayer, shift: number): void {
		const currentPos = this._layers.value.indexOf(layer);
		if (currentPos < 0)
			return;

		const newPos = currentPos + shift;
		if (newPos < 0 && newPos >= this._layers.value.length)
			return;

		const newLayers = this._layers.value.slice();
		newLayers.splice(currentPos, 1);
		newLayers.splice(newPos, 0, layer);
		this._layers.value = newLayers;

		this.onChange();
	}

	public createDefinitionString(): string {
		return `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n` +
			JSON.stringify(AssetSourceGraphicsDefinitionSchema.parse(this.export()), undefined, '\t').trim() +
			'\n';
	}

	public async downloadZip(): Promise<void> {
		const graphicsDefinitionContent = this.createDefinitionString();

		const now = new Date();

		const files: InputWithSizeMeta[] = [
			{ name: 'graphics.json', lastModified: now, input: graphicsDefinitionContent },
		];

		for (const [name, image] of this.fileContents.entries()) {
			files.push({
				name,
				input: image,
				lastModified: now,
			});
		}

		// get the ZIP stream in a Blob
		const blob = await downloadZip(files, {
			metadata: files,
		}).blob();

		DownloadAsFile(blob, `${this.id.replace(/^a\//, '').replaceAll('/', '_')}.zip`);
	}
}
