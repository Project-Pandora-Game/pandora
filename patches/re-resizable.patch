diff --git a/lib/index.d.ts b/lib/index.d.ts
old mode 100644
new mode 100755
index aab36268bae14a9696443d162ed85fe25be07373..fbbd4dec6fb9bf559159c082441a6f8f5198acec
--- a/lib/index.d.ts
+++ b/lib/index.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
 import { Direction } from './resizer';
-export declare type ResizeDirection = Direction;
+export type ResizeDirection = Direction;
 export interface Enable {
     top?: boolean;
     right?: boolean;
@@ -49,8 +49,8 @@ export interface HandleComponent {
     bottomLeft?: React.ReactElement<any>;
     topLeft?: React.ReactElement<any>;
 }
-export declare type ResizeCallback = (event: MouseEvent | TouchEvent, direction: Direction, elementRef: HTMLElement, delta: NumberSize) => void;
-export declare type ResizeStartCallback = (e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>, dir: Direction, elementRef: HTMLElement) => void | boolean;
+export type ResizeCallback = (event: MouseEvent | TouchEvent, direction: Direction, elementRef: HTMLElement, delta: NumberSize) => void;
+export type ResizeStartCallback = (e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>, dir: Direction, elementRef: HTMLElement) => void | boolean;
 export interface ResizableProps {
     as?: string | React.ComponentType<any>;
     style?: React.CSSProperties;
@@ -186,7 +186,7 @@ export declare class Resizable extends React.PureComponent<ResizableProps, State
     onMouseMove(event: MouseEvent | TouchEvent): void;
     onMouseUp(event: MouseEvent | TouchEvent): void;
     updateSize(size: Size): void;
-    renderResizer(): JSX.Element | null;
-    render(): JSX.Element;
+    renderResizer(): React.JSX.Element | null;
+    render(): React.JSX.Element;
 }
 export {};
diff --git a/lib/resizer.d.ts b/lib/resizer.d.ts
old mode 100644
new mode 100755
index 7a6ceab05c473bb2b3ce879a59048052695596c9..e10d0ad6fd7fa60fc2e6f1a35bdc5dec81e96ce6
--- a/lib/resizer.d.ts
+++ b/lib/resizer.d.ts
@@ -1,6 +1,6 @@
 import * as React from 'react';
-export declare type Direction = 'top' | 'right' | 'bottom' | 'left' | 'topRight' | 'bottomRight' | 'bottomLeft' | 'topLeft';
-export declare type OnStartCallback = (e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>, dir: Direction) => void;
+export type Direction = 'top' | 'right' | 'bottom' | 'left' | 'topRight' | 'bottomRight' | 'bottomLeft' | 'topLeft';
+export type OnStartCallback = (e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>, dir: Direction) => void;
 export interface Props {
     direction: Direction;
     className?: string;
@@ -11,5 +11,5 @@ export interface Props {
 export declare class Resizer extends React.PureComponent<Props> {
     onMouseDown: (e: React.MouseEvent<HTMLDivElement>) => void;
     onTouchStart: (e: React.TouchEvent<HTMLDivElement>) => void;
-    render(): JSX.Element;
+    render(): React.JSX.Element;
 }
